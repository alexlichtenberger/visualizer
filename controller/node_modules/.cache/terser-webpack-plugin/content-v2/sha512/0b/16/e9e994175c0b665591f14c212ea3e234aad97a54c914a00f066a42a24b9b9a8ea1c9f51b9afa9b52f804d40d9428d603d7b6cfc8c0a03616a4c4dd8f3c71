{"map":"{\"version\":3,\"sources\":[\"/Users/alexlichtenberger/Desktop/TV_music_thing_2019_02_24_04_18_49/controller/src/App.js\",\"/Users/alexlichtenberger/Desktop/TV_music_thing_2019_02_24_04_18_49/controller/src/serviceWorker.js\",\"/Users/alexlichtenberger/Desktop/TV_music_thing_2019_02_24_04_18_49/controller/src/index.js\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"endpoint\",\"mode\",\"sensitivity\",\"socket\",\"emit\",\"_this2\",\"socketClient\",\"on\",\"data\",\"setState\",\"_this3\",\"react_default\",\"a\",\"createElement\",\"onClick\",\"changeMode\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"qPA4CeA,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,wBACVC,KAAM,QACNC,YAAa,KALEV,0EASRS,GACTN,KAAKQ,OAAOC,KAAK,OAAQ,CAAEH,KAAAA,6CAGZC,GACfP,KAAKQ,OAAOC,KAAK,cAAe,CAAEF,YAAAA,gDAGhB,IAAAG,EAAAV,KAClBA,KAAKQ,OAASG,GAAAA,CAAaX,KAAKI,MAAMC,UACtCL,KAAKQ,OAAOI,GAAG,OAAQ,SAAAC,GAAI,OAAIH,EAAKI,SAAS,CAAER,KAAMO,EAAKP,SAC1DN,KAAKQ,OAAOI,GAAG,cAAe,SAAAC,GAAI,OAChCH,EAAKI,SAAS,CAAEP,YAAaM,EAAKN,iDAI7B,IAAAQ,EAAAf,KACP,OACEgB,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,WAAvC,SACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,YAAvC,UACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,WAAvC,SACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,WAAvC,SACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,WAAvC,SACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,YAAvC,UACAJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,QAAS,WAAA,OAAMJ,EAAKK,WAAW,YAAvC,kBAnCUC,EAAAA,WCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAAA,EAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport socketClient from 'socket.io-client';\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      endpoint: 'http://localhost:3002',\\n      mode: 'white',\\n      sensitivity: 150,\\n    };\\n  }\\n\\n  changeMode(mode) {\\n    this.socket.emit('mode', { mode });\\n  }\\n\\n  changeSensitvity(sensitivity) {\\n    this.socket.emit('sensitivity', { sensitivity });\\n  }\\n\\n  componentDidMount() {\\n    this.socket = socketClient(this.state.endpoint);\\n    this.socket.on('mode', data => this.setState({ mode: data.mode }));\\n    this.socket.on('sensitivity', data =>\\n      this.setState({ sensitivity: data.sensitivity })\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={() => this.changeMode('noise')}>noise</button>\\n        <button onClick={() => this.changeMode('random')}>random</button>\\n        <button onClick={() => this.changeMode('sound')}>sound</button>\\n        <button onClick={() => this.changeMode('color')}>color</button>\\n        <button onClick={() => this.changeMode('white')}>white</button>\\n        <button onClick={() => this.changeMode('bubble')}>bubble</button>\\n        <button onClick={() => this.changeMode('circle')}>circle</button>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{33:function(e,t,n){e.exports=n(66)},63:function(e,t){},66:function(e,t,n){\"use strict\";n.r(t);var o=n(0),i=n.n(o),c=n(26),a=n.n(c),r=n(27),u=n(28),s=n(31),l=n(29),d=n(32),h=n(30),m=n.n(h),b=function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(s.a)(this,Object(l.a)(t).call(this,e))).state={endpoint:\"http://localhost:3002\",mode:\"white\",sensitivity:150},n}return Object(d.a)(t,e),Object(u.a)(t,[{key:\"changeMode\",value:function(e){this.socket.emit(\"mode\",{mode:e})}},{key:\"changeSensitvity\",value:function(e){this.socket.emit(\"sensitivity\",{sensitivity:e})}},{key:\"componentDidMount\",value:function(){var e=this;this.socket=m()(this.state.endpoint),this.socket.on(\"mode\",function(t){return e.setState({mode:t.mode})}),this.socket.on(\"sensitivity\",function(t){return e.setState({sensitivity:t.sensitivity})})}},{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",null,i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"noise\")}},\"noise\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"random\")}},\"random\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"sound\")}},\"sound\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"color\")}},\"color\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"white\")}},\"white\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"bubble\")}},\"bubble\"),i.a.createElement(\"button\",{onClick:function(){return e.changeMode(\"circle\")}},\"circle\"))}}]),t}(o.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(i.a.createElement(b,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[33,1,2]]]);","extractedComments":[]}