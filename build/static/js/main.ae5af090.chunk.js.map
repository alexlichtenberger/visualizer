{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveToState","e","_this$setState","setState","defineProperty","target","name","value","socket","emit","id","state","endpoint","mode","sensitivity","connected","_this2","socketClient","on","data","objectSpread","_this3","react_default","a","createElement","className","getModeNameFromID","onClick","changeMode","style","color","marginBottom","changeSensitvity","type","onChange","onBlur","placeholder","autocapitalize","border","role","aria-label","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae5af090.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport socketClient from 'socket.io-client';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      endpoint: 'https://see-the-volume.herokuapp.com/',\n      // endpoint: 'http://localhost:3002',\n      mode: 'circle',\n      sensitivity: 150,\n      id: '',\n      connected: false,\n    };\n  }\n\n  changeMode(mode) {\n    this.socket.emit('mode', { id: this.state.id, mode });\n  }\n\n  changeSensitvity(sensitivity) {\n    this.socket.emit('sensitivity', { id: this.state.id, sensitivity });\n  }\n\n  componentDidMount() {\n    this.socket = socketClient(this.state.endpoint);\n    this.socket.on('mode', data => {\n      if (this.state.id === data.id) {\n        this.setState({ mode: data.mode });\n      }\n    });\n    this.socket.on('sensitivity', data => {\n      if (this.state.id === data.id) {\n        this.setState({ sensitivity: data.sensitivity });\n      }\n    });\n    this.socket.on('sendinfo', data => {\n      if (this.state.id === data.id) {\n        this.setState({ ...data });\n      }\n    });\n  }\n\n  saveToState = e => {\n    this.setState({ [e.target.name]: e.target.value, connected: false });\n    this.socket.emit('checkid', { id: this.state.id });\n  };\n\n  getModeNameFromID() {\n    // eslint-disable-next-line\n    switch (this.state.mode) {\n      case 'noise':\n        return 'Smooth Colors';\n      case 'random':\n        return 'Random Colors (Dubstep)';\n      case 'sound':\n        return 'Sound-Based Colors (EDM)';\n      case 'white':\n        return 'Mono-Chrome';\n      case 'bubble':\n        return 'Chill Mode (lofi)';\n      case 'circle':\n        return 'Circle Mode (rock/rap/pop)';\n      case 'color':\n        return 'Danger Mode';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <p>Current Sensitivity: {this.state.sensitivity}</p>\n        <p>Current Mode: {this.getModeNameFromID()}</p>\n        <button onClick={() => this.changeMode('noise')}>Smooth Colors</button>\n        <button onClick={() => this.changeMode('random')}>\n          Random Colors (Dubstep)\n        </button>\n        <button onClick={() => this.changeMode('sound')}>\n          Sound-Based Colors (EDM)\n        </button>\n        <button onClick={() => this.changeMode('white')}>Mono-Chrome</button>\n        <button onClick={() => this.changeMode('bubble')}>\n          Chill Mode (lofi)\n        </button>\n        <button onClick={() => this.changeMode('circle')}>\n          Circle Mode (rock/rap/pop)\n        </button>\n        <p\n          style={{\n            color: '#bbbbbb',\n            marginBottom: 0,\n          }}\n        >\n          Change sensitivity:{' '}\n        </p>\n        <div className=\"half\">\n          <button\n            onClick={() => this.changeSensitvity(this.state.sensitivity - 5)}\n          >\n            -\n          </button>\n        </div>\n        <div className=\"half\">\n          <button\n            onClick={() => this.changeSensitvity(this.state.sensitivity + 5)}\n          >\n            +\n          </button>\n        </div>\n        <div id=\"KeyInput\">\n          <p\n            style={{\n              color: '#bbbbbb',\n              marginBottom: 0,\n            }}\n          >\n            Hold the enter key in the visualizer to get the ID and enter it\n            below to connect the controller:\n          </p>\n          <input\n            type=\"text\"\n            id=\"idInput\"\n            name=\"id\"\n            value={this.state.id}\n            onChange={this.saveToState}\n            onBlur={this.saveToState}\n            placeholder=\"id\"\n            autocapitalize=\"off\"\n            style={{\n              border: this.state.connected ? '2px solid lime' : '2px solid red',\n            }}\n          />\n        </div>\n        <button onClick={() => this.changeMode('color')}>\n          <span role=\"img\" aria-label=\"warn\">\n            ⚠️\n          </span>{' '}\n          PRESS AT YOUR OWN RISK\n          <span role=\"img\" aria-label=\"warn\">\n            ⚠️\n          </span>{' '}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}